#lang racket
(#%provide (all-defined))

#|
If there are any specific instructions for a problem, please read them carefully. Otherwise,
follow these general rules:
   - replace the 'UNIMPLEMENTED symbol with your solution
   - you are NOT allowed to change the names of any definition
   - you are NOT allowed to change the number of arguments of the pre-defined functions,
     but you can change the names of the arguments if you deem it necessary.
   - make sure that you submit an asnwer sheet that compiles! If you cannot write
     a correct solution at least make it compile, if you cannot make it compile then
     comment it out. In the latter case, make sure that the default definitions
     for the problem are still present. Otherwise you may be penalized up to 25%
     of the total points for the homework.
   - you may use any number of helper functions you deem necessary.

When done, make sure that you do not get any errors when you hit the "Run" button. You will
lose up to 25% of the total points for the entire homework depending on the number of errors.
If you cannot come up with a correct solution then please make the answer-sheet
compile correctly and comment any partial solution you might have; if this is the case,
the default definitions will have to be present!

|#
;======================================01=======================================
;((3 + 3) * 9)
;equal to 54
(define (p1-1)
  (* 9 (+ 3 3))
)

;((6 * 9) / ((4 + 2) + (4 * 3)))
;equal to 3
(define (p1-2)
  (/ (* 6 9) (+ (+ 4 2) (* 4 3)))
)

;(2* ((20 - (91 / 7)) * (45 - 42)))
;equal to 42
(define (p1-3)
  (* 2 (* (- 20 (/ 91 7)) (- 45 42)))
)
;======================================02=======================================
;write your answer as a string; you do not need to write any special escape
;characters to distinguish new lines.
(define p2
  "To represent an algebraic expression into a scheme/racket expression
you need to change the infix(5+10) into a prefix(+ 5 10)"
)
;======================================03=======================================
;;Write the definitions of x,y,z here:
(define x 2)
(define y 3)
(define z 4)

;======================================04=======================================
;you will need to have solved problem 3. The values x,y,z are not parameters
;of this function!
(define (p4)
  (cond
    ((= x y z) 0)
    ((if (and (< x y) (< x z))
        (+ y z)
        (if (< y z)
            (+ x z)
            (+ x y)))))
)

;======================================05=======================================
(define (p5)
  (cond
    ((= x y z) 0)
    ((if (and (> x y) (> x z))
        (+ y z)
        (if (> y z)
            (+ x z)
            (+ x y)))))  
)

;======================================06=======================================
(define (p6)
  (= x y)  
)

;======================================07=======================================
;same instructions as problem 02.
(define p7
  "In the statement (define thirty-five 35), thirty-five is a
variable. In the statement (define (thirty-five) 35), thirty-five is
a function"
)

;======================================08=======================================
;same instructions as problem 02.
(define p8
  "The quote tells the Scheme/Racket to not evaluate the expression
after the quote and just represents is as data or text"
)

;======================================09=======================================
;same instructions as problem 02.
(define p9
  "Using '(x y z) returns '(x y z). however using (list x y z)retuns
'(2 3 4). Using list returns the value stored in memory for x, y,
and z while the quote just return the original expression. List is
a function that is evaluated while quote is a special case that
prevents evaluation and just returns the list"
)

;======================================10=======================================
;same instructions as problem 02.
(define p10
  "Strings are sequences of characters with fixed length. A symbol is
like an immutable string that happens to be interned.Two symbols that
have the same contents are guaranteed to be the same object. With a
symbol you can use eq? to compare characters. Two strings however can
very well be different objects residing in different locations of
memory, and to compare them requires comparing every character
separately for a match"
)

;======================================11=======================================
;(4 2 6 9)
(define (p11-1)
  (list 4 2 6 9)  
)

;(spaceship
;  (name(serenity))
;  (class(firefly)))
(define (p11-2)
  (list 'spaceship(list'name(list'serenity))(list'class(list'firefly)))
)

;(2 * ((20 - (91 / 7)) * (45 - 42)))
(define (p11-3)
  (list'2'*(list(list'20'-(list '91 '/ '7))'*(list'45'-'42)))  
)

;======================================12=======================================
(define example '(a b c))

;(d a b c)
(define (p12-1 lst)
  (cons 'd lst)
)

;(a b d a b)
(define (p12-2 lst)
  (list
   (car lst)
   (cadr lst)
    'd
   (car lst)
   (cadr lst))
)

;(b c d a)
(define (p12-3 lst)
  (list
   (cadr lst)
   (cadr (cdr lst))
    'd
   (car lst))
)


;======================================13=======================================
(define p13
  "Two values are eq? if they reference the same object or do they
represent the same thing in the memory. Two values are equal? if they
are exactly the same and if and only if they are eq?.
For example: (eq?(integer->char 955)(integer->char 955))=>#f but
(equal? (interger->char 955) (interger->char 955))=>#t because eq?
doesn't work for character data types but equal? does"
)
; write your answer as a string; you do not need to write any special escape
; characters to distinguish new lines.


;======================================14=======================================
(define (create-error-msg sym val)
  (string-append
   "This is a custom error message we will be using next. Symbol '"
   (symbol->string sym)" was not paired with value "(number->string val))
)
;======================================15=======================================
(define (check-correctness pair)
  (cond((equal? "answer-to-everything" (symbol->string (car pair)))
     (cond ((eq? 42 (cadr pair)) #t)
       (else (create-error-msg(car pair)42))))
    ((eq? (car pair) (cadr pair)) #t)
    (else #f))    
)

;======================================16=======================================
;No answer necessary - just experiment it as instructed in hw01.txt file


